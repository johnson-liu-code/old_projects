
from __future__ import print_function


import sys
#print(sys.version)

import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, SeparableConv2D, DepthwiseConv2D
from keras.layers import MaxPooling2D, AveragePooling2D, GlobalMaxPooling2D, GlobalAveragePooling2D
from keras import regularizers
from keras import metrics
import os
import pickle
from keras.layers.normalization import BatchNormalization
import psutil
from apscheduler.schedulers.background import BackgroundScheduler


process = psutil.Process()

mcpu = 0
mmem = 0

def get_info():
    global mmem
    mem = process.memory_info().rss
    if mmem < mem:
        mmem = mem

scheduler = BackgroundScheduler()
scheduler.add_job(get_info, 'interval', seconds=1)


batch_size = 2
num_classes = 10
epochs = 1
data_augmentation = True

#load saved data
pkl_file = open('../x_train.pkl', 'rb')
x_train = pickle.load(pkl_file, encoding='latin1')
#x_train = pickle.load(pkl_file)
pkl_file.close()

pkl_file = open('../y_train.pkl', 'rb')
y_train = pickle.load(pkl_file, encoding='latin1')
#y_train = pickle.load(pkl_file)
pkl_file.close()

pkl_file = open('../x_test.pkl', 'rb')
x_test = pickle.load(pkl_file, encoding='latin1')
#x_test = pickle.load(pkl_file)
pkl_file.close()

pkl_file = open('../y_test.pkl', 'rb')
y_test = pickle.load(pkl_file, encoding='latin1')
#y_test = pickle.load(pkl_file)
pkl_file.close()

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
